openapi: 3.0.3
info:
  title: AI Event Concepter - User Service
  description: |
    User Service for the AI Event Concepter platform. Handles user management,
    authentication, role-based access control, and user preferences.
    
    This service manages:
    - User profile management (accessed via API Gateway)
    - Internal user data storage and retrieval
    - User preferences and settings
  version: 1.0.0
  contact:
    name: AI Event Concepter Team
    email: support@aieventconcepter.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8081
    description: Development server (User Service)
  - url: https://users.aieventconcepter.com
    description: Production server

paths:
  /health:
    get:
      summary: Health check
      description: Check if the User Service is running
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "UP"
                  timestamp:
                    type: string
                    format: date-time
                  service:
                    type: string
                    example: "user-service"

  /api/users/register:
    post:
      summary: Register new user
      description: Create a new user account
      tags:
        - User Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/profile:
    get:
      summary: Get current user profile
      description: Retrieve the authenticated user's profile
      tags:
        - Profile Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update current user profile
      description: Update the authenticated user's profile
      tags:
        - Profile Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          example: "john.doe@eventcorp.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        preferences:
          $ref: '#/components/schemas/UserPreferences'
        isActive:
          type: boolean
          example: true
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserPreferences:
      type: object
      properties:
        preferredEventFormat:
          type: string
          enum: [PHYSICAL, VIRTUAL, HYBRID]
          example: "HYBRID"
        industry:
          type: string
          example: "Technology"
        language:
          type: string
          example: "en"
        timezone:
          type: string
          example: "Europe/Berlin"

    RegisterUserRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          example: "john.doe@eventcorp.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "SecurePassword123!"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        preferences:
          $ref: '#/components/schemas/UserPreferences'

    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        preferences:
          $ref: '#/components/schemas/UserPreferences'
        isActive:
          type: boolean
          example: true

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "VALIDATION_ERROR"
        message:
          type: string
          example: "Invalid input data provided"
        timestamp:
          type: string
          format: date-time
        path:
          type: string
          example: "/api/users/profile"
        details:
          type: array
          items:
            type: string
          example: ["firstName must not be blank"]

tags:
  - name: Health
    description: Health check endpoints
  - name: User Registration
    description: New user registration
  - name: Profile Management
    description: User profile and preferences management 
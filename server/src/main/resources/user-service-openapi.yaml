openapi: 3.0.3
info:
  title: AI Event Concepter - User Service
  description: |
    User Service for the AI Event Concepter platform. Handles user management,
    authentication, role-based access control, and user preferences.
    
    This service manages:
    - User registration and profile management
    - Role-based permissions (Event Planner, Admin)
    - User preferences for event planning
    - User session management
  version: 1.0.0
  contact:
    name: AI Event Concepter Team
    email: support@aieventconcepter.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8081
    description: Development server (User Service)
  - url: https://users.aieventconcepter.com
    description: Production server

paths:
  /health:
    get:
      summary: Health check
      description: Check if the User Service is running
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "UP"
                  timestamp:
                    type: string
                    format: date-time
                  service:
                    type: string
                    example: "user-service"

  /api/users/register:
    post:
      summary: Register new user
      description: Register a new user account
      tags:
        - User Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
              properties:
                email:
                  type: string
                  format: email
                  example: "john.doe@eventcorp.com"
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: "SecurePassword123!"
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                role:
                  type: string
                  enum: [EVENT_PLANNER, ADMIN]
                  default: EVENT_PLANNER
                preferences:
                  $ref: '#/components/schemas/UserPreferences'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/validate:
    post:
      summary: Validate user credentials
      description: Validate user credentials for authentication
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Credentials valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid credentials"

  /api/users:
    get:
      summary: Get all users
      description: Retrieve paginated list of all users (Admin only)
      tags:
        - User Management
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: sort
          in: query
          description: Sort criteria (field,direction)
          schema:
            type: string
            default: "createdAt,desc"
            example: "lastName,asc"
        - name: search
          in: query
          description: Search term for filtering users
          schema:
            type: string
        - name: role
          in: query
          description: Filter by user role
          schema:
            type: string
            enum: [EVENT_PLANNER, ADMIN]
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pageable:
                    $ref: '#/components/schemas/Pageable'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  last:
                    type: boolean
                  size:
                    type: integer
                  number:
                    type: integer
                  sort:
                    $ref: '#/components/schemas/Sort'
                  numberOfElements:
                    type: integer
                  first:
                    type: boolean
                  empty:
                    type: boolean
        '403':
          description: Access forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/{userId}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by ID (Admin or own profile)
      tags:
        - User Management
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update user
      description: Update user information (Admin or own profile)
      tags:
        - User Management
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete user
      description: Delete a user account (Admin only)
      tags:
        - User Management
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/profile:
    get:
      summary: Get current user profile
      description: Retrieve the authenticated user's profile
      tags:
        - Profile Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update current user profile
      description: Update the authenticated user's profile
      tags:
        - Profile Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/preferences:
    get:
      summary: Get user preferences
      description: Retrieve the authenticated user's preferences
      tags:
        - Profile Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User preferences retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'

    put:
      summary: Update user preferences
      description: Update the authenticated user's preferences
      tags:
        - Profile Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferences'
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '400':
          description: Invalid preference data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/change-password:
    post:
      summary: Change password
      description: Change the authenticated user's password
      tags:
        - Profile Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  format: password
                newPassword:
                  type: string
                  format: password
                  minLength: 8
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password changed successfully"
        '400':
          description: Invalid password data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Current password is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/roles:
    get:
      summary: Get available roles
      description: Retrieve list of available user roles
      tags:
        - User Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      enum: [EVENT_PLANNER, ADMIN]
                    description:
                      type: string
                    permissions:
                      type: array
                      items:
                        type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          example: "john.doe@eventcorp.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        role:
          type: string
          enum: [EVENT_PLANNER, ADMIN]
          example: "EVENT_PLANNER"
        preferences:
          $ref: '#/components/schemas/UserPreferences'
        isActive:
          type: boolean
          example: true
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserPreferences:
      type: object
      properties:
        defaultEventCapacity:
          type: integer
          minimum: 1
          maximum: 100000
          example: 500
        preferredEventFormat:
          type: string
          enum: [PHYSICAL, VIRTUAL, HYBRID]
          example: "HYBRID"
        industry:
          type: string
          example: "Technology"
        timezone:
          type: string
          example: "Europe/Berlin"
        language:
          type: string
          example: "en"
        emailNotifications:
          type: object
          properties:
            conceptUpdates:
              type: boolean
              example: true
            aiSuggestions:
              type: boolean
              example: true
            weeklyDigest:
              type: boolean
              example: false
        defaultBudgetRange:
          type: object
          properties:
            min:
              type: number
              example: 10000
            max:
              type: number
              example: 100000
            currency:
              type: string
              example: "EUR"
        preferredVenues:
          type: array
          items:
            type: string
          example: ["Convention Centers", "Hotels", "University Campuses"]
        collaborationPreferences:
          type: object
          properties:
            allowTeamAccess:
              type: boolean
              example: true
            shareAnalytics:
              type: boolean
              example: false

    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        preferences:
          $ref: '#/components/schemas/UserPreferences'
        isActive:
          type: boolean
          example: true

    Pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/Sort'
        offset:
          type: integer
        pageSize:
          type: integer
        pageNumber:
          type: integer
        paged:
          type: boolean
        unpaged:
          type: boolean

    Sort:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "VALIDATION_ERROR"
        message:
          type: string
          example: "Invalid input data"
        details:
          type: array
          items:
            type: string
        timestamp:
          type: string
          format: date-time
        path:
          type: string
          example: "/api/users/register"
        status:
          type: integer
          example: 400

tags:
  - name: Health
    description: Health check endpoints
  - name: Authentication
    description: User authentication operations
  - name: User Management
    description: User CRUD operations (Admin)
  - name: Profile Management
    description: User profile and preferences management 
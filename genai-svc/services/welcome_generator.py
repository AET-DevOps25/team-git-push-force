from langchain.prompts import PromptTemplate
from genai_models.models.initialize_chat_for_concept_request import InitializeChatForConceptRequest


class WelcomeGenerator:
    """Generates welcome messages for new chat sessions"""

    def __init__(self, llm):
        """Initialize the welcome generator with an LLM"""
        self.llm = llm
        self.welcome_prompt = PromptTemplate(
            input_variables=["user_name", "concept_name", "concept_description"],
            template=r"""You are an AI assistant for event planning and concept development.

        Generate a friendly welcome message for {user_name} who is creating a new event concept called \"{concept_name}\".
        The concept is described as: {concept_description}
        
        Your welcome message should be enthusiastic, mention the concept name and briefly comment on the concept description. Also offer to help with developing the concept further.
        
        IMPORTANT: For all future responses in this chat, always provide your answer in two parts:
        1. A conversational response.
        2. A JSON object matching this schema (with only known fields, except 'id' which is always provided by the system and should not be generated by you):
        
        Example:
        ```json
        {{
          "title": "Tech Innovation Summit 2024",
          "description": "A summit focused on the latest in tech innovation.",
          "status": "DRAFT",
          "eventDetails": {{
            "theme": "Innovation in Technology",
            "format": "HYBRID",
            "capacity": 500,
            "duration": "2 days",
            "targetAudience": "Tech professionals",
            "location": "Munich, Germany"
          }},
          "agenda": [
            {{
              "time": "09:00",
              "title": "Opening Keynote",
              "type": "KEYNOTE",
              "duration": 60
            }},
            {{
              "time": "10:30",
              "title": "Workshop: AI Trends",
              "type": "WORKSHOP",
              "duration": 90
            }}
          ],
          "speakers": [
            {{
              "name": "Dr. Jane Doe",
              "expertise": "AI Research",
              "suggestedTopic": "The Future of AI"
            }}
          ],
          "pricing": {{
            "currency": "EUR",
            "earlyBird": 199,
            "regular": 299,
            "vip": 499,
            "student": 99
          }}
        }}
        ```
        
        If you only know part of the concept, include only those fields. Never invent or fill unknown fields. Use conceptUpdates for partial changes. Always follow this format for every response in this chat.
        
        Welcome message:"""
        )

    def generate_welcome_message(self, init_request: InitializeChatForConceptRequest) -> str:
        """Generate a welcome message for a new concept"""
        try:
            # Extract information from the request
            user_name = init_request.user_id  # Using userId as user_name placeholder
            concept_name = init_request.concept_title
            concept_description = ""  # Not available in current API spec, providing empty string

            # Use the welcome prompt template with RunnableSequence
            chain = self.welcome_prompt | self.llm
            welcome_message = chain.invoke({
                "user_name": user_name,
                "concept_name": concept_name,
                "concept_description": concept_description
            })

            # Remove any JSON block from the welcome message
            import re
            cleaned_message = re.sub(r'```json[\s\S]*?```', '', welcome_message, flags=re.MULTILINE)
            cleaned_message = re.sub(r'```[\s\S]*?```', '', cleaned_message, flags=re.MULTILINE)
            cleaned_message = re.sub(r'\{(?:[^{}]|(?:\{(?:[^{}]|(?:\{[^{}]*\}))*\}))*\}', '', cleaned_message, flags=re.DOTALL)
            cleaned_message = re.sub(r'Example:\s*', '', cleaned_message)
            cleaned_message = re.sub(r"Here(?:'s| is) (?:a|the) (?:summary|concept|JSON structure)[^:]*:\s*", '', cleaned_message)
            cleaned_message = re.sub(r'\n{2,}', '\n', cleaned_message)
            return cleaned_message.strip()
        except Exception as e:
            print(f"Error generating welcome message: {e}")
            # Fallback message using available data
            return f"Welcome, {init_request.user_id}! I'm here to help you develop your event concept '{init_request.concept_title}'. Let's get started!"


# Create a singleton instance
welcome_generator = WelcomeGenerator(None)  # Will be initialized later with LLM

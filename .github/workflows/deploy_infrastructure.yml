name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      terraform_action:
        description: 'Terraform action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
        - plan
        - apply
        - destroy
      skip_ansible:
        description: 'Skip Ansible deployment'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - main
      - feat/terraform
    paths:
      - 'infrastructure/**'

env:
  TF_VERSION: '1.6.0'
  ANSIBLE_VERSION: '8.5.0'
  AWS_DEFAULT_REGION: 'us-east-1'

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.terraform_action || 'plan' }}
    runs-on: ubuntu-latest
    if: false  # Workflow disabled - TODO: Enable when ready
    environment: ${{ github.event.inputs.environment || 'staging' }}
    defaults:
      run:
        working-directory: infrastructure/terraform
    outputs:
      instance_ip: ${{ steps.terraform_output.outputs.instance_ip }}
      key_pair_name: ${{ steps.terraform_output.outputs.key_pair_name }}
      private_key: ${{ steps.terraform_output.outputs.private_key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |
          terraform init
          
          # Create or select workspace for environment isolation
          if ! terraform workspace select ${{ github.event.inputs.environment || 'staging' }}; then
            terraform workspace new ${{ github.event.inputs.environment || 'staging' }}
          fi
          
          echo "Current workspace: $(terraform workspace show)"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Check Backend State
        id: backend_check
        run: |
          # Check if backend resources exist
          if ! aws s3api head-bucket --bucket concepter-terraform-state 2>/dev/null; then
            echo "⚠️  S3 backend bucket not found!"
            echo "Please run the backend setup first:"
            echo "cd infrastructure && ./setup-backend.sh"
            echo "backend_exists=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Backend S3 bucket found"
            echo "backend_exists=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Plan
        id: plan
        if: steps.backend_check.outputs.backend_exists == 'true'
        run: |
          terraform plan \
            -var="environment=${{ github.event.inputs.environment || 'staging' }}" \
            -var="project_name=concepter-${{ github.event.inputs.environment || 'staging' }}" \
            -out=tfplan -no-color
        env:
          TF_VAR_aws_region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Terraform Plan Output
        if: steps.plan.outcome == 'success'
        run: terraform show -no-color tfplan

      - name: Terraform Apply
        id: apply
        if: |
          steps.backend_check.outputs.backend_exists == 'true' && 
          (github.event.inputs.terraform_action == 'apply' || 
           (github.event_name == 'push' && github.ref == 'refs/heads/main'))
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        id: destroy
        if: |
          steps.backend_check.outputs.backend_exists == 'true' && 
          github.event.inputs.terraform_action == 'destroy'
        run: |
          terraform destroy -auto-approve \
                           -var="environment=${{ github.event.inputs.environment || 'staging' }}" \
                           -var="project_name=concepter-${{ github.event.inputs.environment || 'staging' }}"
        env:
          TF_VAR_aws_region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Get Terraform Outputs
        id: terraform_output
        if: steps.apply.outcome == 'success' || github.event.inputs.terraform_action == 'plan'
        run: |
          if terraform output -raw instance_public_ip 2>/dev/null; then
            echo "instance_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
            echo "key_pair_name=$(terraform output -raw key_pair_name)" >> $GITHUB_OUTPUT
            echo "private_key=$(terraform output -raw private_key)" >> $GITHUB_OUTPUT
          else
            echo "Terraform outputs not available yet"
          fi

      - name: Save Terraform Outputs to Artifacts
        if: steps.apply.outcome == 'success'
        run: |
          mkdir -p ../ansible/artifacts
          terraform output -raw private_key > ../ansible/artifacts/private_key.pem
          chmod 600 ../ansible/artifacts/private_key.pem
          terraform output -raw instance_public_ip > ../ansible/artifacts/instance_ip.txt

      - name: Upload Terraform Artifacts
        if: steps.apply.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-${{ github.event.inputs.environment || 'staging' }}
          path: infrastructure/ansible/artifacts/
          retention-days: 1

  ansible:
    name: Ansible Deployment
    runs-on: ubuntu-latest
    needs: terraform
    if: |
      always() && 
      (needs.terraform.result == 'success') && 
      (github.event.inputs.terraform_action != 'destroy') &&
      (github.event.inputs.skip_ansible != 'true') &&
      (needs.terraform.outputs.instance_ip != '')
    environment: ${{ github.event.inputs.environment || 'staging' }}
    defaults:
      run:
        working-directory: infrastructure/ansible
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          pip install ansible==${{ env.ANSIBLE_VERSION }}
          pip install boto3 botocore

      - name: Download Terraform Artifacts
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs-${{ github.event.inputs.environment || 'staging' }}
          path: infrastructure/ansible/artifacts/

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          cp artifacts/private_key.pem ~/.ssh/ansible_key.pem
          chmod 600 ~/.ssh/ansible_key.pem

      - name: Create Dynamic Inventory
        run: |
          INSTANCE_IP=$(cat artifacts/instance_ip.txt)
          cat > inventory.ini << EOF
          [app_server]
          concepter-server ansible_host=${INSTANCE_IP} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/ansible_key.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no'
          EOF

      - name: Test Ansible Connection
        run: |
          ansible all -i inventory.ini -m ping --timeout=30
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'

      - name: Wait for Instance to be Ready
        run: |
          INSTANCE_IP=$(cat artifacts/instance_ip.txt)
          for i in {1..30}; do
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i ~/.ssh/ansible_key.pem ubuntu@${INSTANCE_IP} 'echo "Instance ready"'; then
              echo "Instance is ready!"
              break
            fi
            echo "Attempt $i: Instance not ready yet, waiting..."
            sleep 10
          done

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i inventory.ini playbook.yml \
            --extra-vars "github_actor=${{ github.actor }}" \
            --extra-vars "github_token=${{ secrets.GITHUB_TOKEN }}" \
            --extra-vars "environment=${{ github.event.inputs.environment || 'staging' }}" \
            -v
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'

      - name: Verify Deployment
        run: |
          INSTANCE_IP=$(cat artifacts/instance_ip.txt)
          echo "Application should be available at: http://${INSTANCE_IP}:3000"
          
          # Test application health
          for i in {1..10}; do
            if curl -f "http://${INSTANCE_IP}:3000" > /dev/null 2>&1; then
              echo "✅ Application is responding successfully!"
              break
            fi
            echo "Attempt $i: Application not ready yet, waiting..."
            sleep 15
          done

      - name: Cleanup Artifacts
        if: always()
        run: |
          rm -f ~/.ssh/ansible_key.pem
          rm -rf artifacts/

  update-environment:
    name: Update Environment Variables
    runs-on: ubuntu-latest
    needs: [terraform, ansible]
    if: |
      always() && 
      (needs.terraform.result == 'success') && 
      (needs.ansible.result == 'success') &&
      (needs.terraform.outputs.instance_ip != '')
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Update Environment URL
        run: |
          INSTANCE_IP="${{ needs.terraform.outputs.instance_ip }}"
          echo "🌐 Application deployed successfully!"
          echo "📍 Environment: ${{ github.event.inputs.environment || 'staging' }}"
          echo "🔗 URL: http://${INSTANCE_IP}:3000"
          echo "⚙️  API Gateway: http://${INSTANCE_IP}:8080"
          
          # You can add API calls here to update environment variables in GitHub
          # or external systems with the new instance IP 